syntax = "proto2";

// <user service>
message LoginCredentials{
	required string username = 1;
	required string password = 2;
}

message RegisterCredentials{
	required string username = 1;
	required string emailAddress = 2;
	required string password = 3;
}

message AuthToken{
	required string userId = 1;
	required int64 generatedAt = 2;
	required int64 expiresAt = 3;
	required bytes signature = 4; 
}

message User{
	required string username = 1;
	required string emailAddress = 2;
	required string userId = 3;
	optional AuthToken token = 4;
}

service UserService{
	rpc login(LoginCredentials) returns (User){};
	rpc register(RegisterCredentials) returns (User){};
	rpc delete(AuthToken) returns (User){};
}
//</user service>

//<entry service>
message Entry{
	// optional fields will be added only by the backend
	optional string id = 1;
	optional string userId = 2;
	required string algorithmName = 3;
	required string functionName = 4;
	map<string, string> inputParameters = 5;
	optional string output = 6;
	required string keyId = 7;
	required int64 executionTime = 8;
}

message EntryID{
	required AuthToken token = 1;
	required string entryId = 2;
}

service EntryService{
	rpc getById(EntryID) returns (Entry){};
	rpc getEntryHistory(AuthToken) returns (stream Entry){};
	rpc deleteEntry(EntryID) returns (EntryID){};
}

//</entry service>


//<KYBER service>

message KYBERParameters{
	required int64 n = 1;
	required int64 q = 2;
	required int64 eta = 3;
	required int64 k = 4;
	required int64 du = 5;
	required int64 dv = 6;
}

message KYBERKeys{
	optional string keyId = 1;
	required KYBERParameters parameters = 2;
	required string pk = 3;
	required string sk = 4;
}

message KYBERKeygenResult{
	required KYBERKeys keys = 1;
	required Entry entry = 2;
}

message KYBERKeygenParameters{
	required AuthToken token = 1;
	required KYBERParameters parameters = 2;
}

message KYBERExecution{
	required KYBERKeys keys = 1;
	required AuthToken token = 2;
	required int64 iterations = 3;
	optional string data = 4;
}

message KYBERKeyImport{
	required KYBERKeys keys = 1;
	required AuthToken token = 2;
}

service KYBERService{
	rpc keygen(KYBERKeygenParameters) returns (KYBERKeygenResult){};
	rpc getKeys(AuthToken) returns (stream KYBERKeys){};
	rpc addKeys(KYBERKeyImport) returns (KYBERKeys){};
	rpc runEncaps(KYBERExecution) returns (stream Entry){}; 
	rpc runDecaps(KYBERExecution) returns (stream Entry){}; 
}

//</KYBER service>

//<CTRU service>

message CTRUParameters{
	required int64 n = 1;
	required int64 q = 2;
	required int64 q2 = 3;
	required int64 eta = 4;
}

message CTRUKeys{
	optional string keyId = 1;
	required CTRUParameters parameters = 2;
	required string pk = 3;
	required string sk = 4;
}

message CTRUKeygenResult{
	required CTRUKeys keys = 1;
	required Entry entry = 2;
}

message CTRUKeygenParameters{
	required AuthToken token = 1;
	required CTRUParameters parameters = 2;
}

message CTRUExecution{
	required CTRUKeys keys = 1;
	required AuthToken token = 2;
	required int64 iterations = 3;
	optional string data = 4;
}

message CTRUKeyImport{
	required CTRUKeys keys = 1;
	required AuthToken token = 2;
}

service CTRUService{
	rpc keygen(CTRUKeygenParameters) returns (CTRUKeygenResult){};
	rpc getKeys(AuthToken) returns (stream CTRUKeys){};
	rpc addKeys(CTRUKeyImport) returns (CTRUKeys){};
	rpc runEncaps(CTRUExecution) returns (stream Entry){}; 
	rpc runDecaps(CTRUExecution) returns (stream Entry){}; 
}

//</CTRU service>