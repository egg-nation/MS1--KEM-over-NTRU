# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import algorithm_tester_pb2 as algorithm__tester__pb2


class TimeTesterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunTest = channel.unary_unary(
                '/TimeTester/RunTest',
                request_serializer=algorithm__tester__pb2.Test.SerializeToString,
                response_deserializer=algorithm__tester__pb2.Job.FromString,
                )
        self.CheckStatus = channel.unary_unary(
                '/TimeTester/CheckStatus',
                request_serializer=algorithm__tester__pb2.Job.SerializeToString,
                response_deserializer=algorithm__tester__pb2.Job.FromString,
                )


class TimeTesterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeTesterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunTest': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTest,
                    request_deserializer=algorithm__tester__pb2.Test.FromString,
                    response_serializer=algorithm__tester__pb2.Job.SerializeToString,
            ),
            'CheckStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckStatus,
                    request_deserializer=algorithm__tester__pb2.Job.FromString,
                    response_serializer=algorithm__tester__pb2.Job.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TimeTester', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TimeTester(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeTester/RunTest',
            algorithm__tester__pb2.Test.SerializeToString,
            algorithm__tester__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeTester/CheckStatus',
            algorithm__tester__pb2.Job.SerializeToString,
            algorithm__tester__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EntryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_stream(
                '/EntryService/List',
                request_serializer=algorithm__tester__pb2.Null.SerializeToString,
                response_deserializer=algorithm__tester__pb2.Entry.FromString,
                )
        self.Find = channel.unary_stream(
                '/EntryService/Find',
                request_serializer=algorithm__tester__pb2.SearchQuery.SerializeToString,
                response_deserializer=algorithm__tester__pb2.Entry.FromString,
                )


class EntryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EntryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=algorithm__tester__pb2.Null.FromString,
                    response_serializer=algorithm__tester__pb2.Entry.SerializeToString,
            ),
            'Find': grpc.unary_stream_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=algorithm__tester__pb2.SearchQuery.FromString,
                    response_serializer=algorithm__tester__pb2.Entry.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EntryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EntryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/EntryService/List',
            algorithm__tester__pb2.Null.SerializeToString,
            algorithm__tester__pb2.Entry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/EntryService/Find',
            algorithm__tester__pb2.SearchQuery.SerializeToString,
            algorithm__tester__pb2.Entry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
