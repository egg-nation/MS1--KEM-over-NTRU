/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.6.1
// source: v1.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./v1_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.LoginCredentials,
 *   !proto.User>}
 */
const methodDescriptor_UserService_login = new grpc.web.MethodDescriptor(
  '/UserService/login',
  grpc.web.MethodType.UNARY,
  proto.LoginCredentials,
  proto.User,
  /**
   * @param {!proto.LoginCredentials} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.User.deserializeBinary
);


/**
 * @param {!proto.LoginCredentials} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.UserServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/UserService/login',
      request,
      metadata || {},
      methodDescriptor_UserService_login,
      callback);
};


/**
 * @param {!proto.LoginCredentials} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.User>}
 *     Promise that resolves to the response
 */
proto.UserServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/UserService/login',
      request,
      metadata || {},
      methodDescriptor_UserService_login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.RegisterCredentials,
 *   !proto.User>}
 */
const methodDescriptor_UserService_register = new grpc.web.MethodDescriptor(
  '/UserService/register',
  grpc.web.MethodType.UNARY,
  proto.RegisterCredentials,
  proto.User,
  /**
   * @param {!proto.RegisterCredentials} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.User.deserializeBinary
);


/**
 * @param {!proto.RegisterCredentials} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.UserServiceClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/UserService/register',
      request,
      metadata || {},
      methodDescriptor_UserService_register,
      callback);
};


/**
 * @param {!proto.RegisterCredentials} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.User>}
 *     Promise that resolves to the response
 */
proto.UserServicePromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/UserService/register',
      request,
      metadata || {},
      methodDescriptor_UserService_register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AuthToken,
 *   !proto.User>}
 */
const methodDescriptor_UserService_delete = new grpc.web.MethodDescriptor(
  '/UserService/delete',
  grpc.web.MethodType.UNARY,
  proto.AuthToken,
  proto.User,
  /**
   * @param {!proto.AuthToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.User.deserializeBinary
);


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.UserServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/UserService/delete',
      request,
      metadata || {},
      methodDescriptor_UserService_delete,
      callback);
};


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.User>}
 *     Promise that resolves to the response
 */
proto.UserServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/UserService/delete',
      request,
      metadata || {},
      methodDescriptor_UserService_delete);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.EntryServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.EntryServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EntryID,
 *   !proto.Entry>}
 */
const methodDescriptor_EntryService_getById = new grpc.web.MethodDescriptor(
  '/EntryService/getById',
  grpc.web.MethodType.UNARY,
  proto.EntryID,
  proto.Entry,
  /**
   * @param {!proto.EntryID} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Entry.deserializeBinary
);


/**
 * @param {!proto.EntryID} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Entry)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Entry>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EntryServiceClient.prototype.getById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EntryService/getById',
      request,
      metadata || {},
      methodDescriptor_EntryService_getById,
      callback);
};


/**
 * @param {!proto.EntryID} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Entry>}
 *     Promise that resolves to the response
 */
proto.EntryServicePromiseClient.prototype.getById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EntryService/getById',
      request,
      metadata || {},
      methodDescriptor_EntryService_getById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AuthToken,
 *   !proto.Entries>}
 */
const methodDescriptor_EntryService_getEntryHistory = new grpc.web.MethodDescriptor(
  '/EntryService/getEntryHistory',
  grpc.web.MethodType.UNARY,
  proto.AuthToken,
  proto.Entries,
  /**
   * @param {!proto.AuthToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Entries.deserializeBinary
);


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Entries)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Entries>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EntryServiceClient.prototype.getEntryHistory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EntryService/getEntryHistory',
      request,
      metadata || {},
      methodDescriptor_EntryService_getEntryHistory,
      callback);
};


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Entries>}
 *     Promise that resolves to the response
 */
proto.EntryServicePromiseClient.prototype.getEntryHistory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EntryService/getEntryHistory',
      request,
      metadata || {},
      methodDescriptor_EntryService_getEntryHistory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EntryID,
 *   !proto.EntryID>}
 */
const methodDescriptor_EntryService_deleteEntry = new grpc.web.MethodDescriptor(
  '/EntryService/deleteEntry',
  grpc.web.MethodType.UNARY,
  proto.EntryID,
  proto.EntryID,
  /**
   * @param {!proto.EntryID} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EntryID.deserializeBinary
);


/**
 * @param {!proto.EntryID} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EntryID)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EntryID>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EntryServiceClient.prototype.deleteEntry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EntryService/deleteEntry',
      request,
      metadata || {},
      methodDescriptor_EntryService_deleteEntry,
      callback);
};


/**
 * @param {!proto.EntryID} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EntryID>}
 *     Promise that resolves to the response
 */
proto.EntryServicePromiseClient.prototype.deleteEntry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EntryService/deleteEntry',
      request,
      metadata || {},
      methodDescriptor_EntryService_deleteEntry);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.KYBERServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.KYBERServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.KYBERKeygenParameters,
 *   !proto.KYBERKeygenResult>}
 */
const methodDescriptor_KYBERService_keygen = new grpc.web.MethodDescriptor(
  '/KYBERService/keygen',
  grpc.web.MethodType.UNARY,
  proto.KYBERKeygenParameters,
  proto.KYBERKeygenResult,
  /**
   * @param {!proto.KYBERKeygenParameters} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.KYBERKeygenResult.deserializeBinary
);


/**
 * @param {!proto.KYBERKeygenParameters} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.KYBERKeygenResult)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.KYBERKeygenResult>|undefined}
 *     The XHR Node Readable Stream
 */
proto.KYBERServiceClient.prototype.keygen =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/KYBERService/keygen',
      request,
      metadata || {},
      methodDescriptor_KYBERService_keygen,
      callback);
};


/**
 * @param {!proto.KYBERKeygenParameters} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.KYBERKeygenResult>}
 *     Promise that resolves to the response
 */
proto.KYBERServicePromiseClient.prototype.keygen =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/KYBERService/keygen',
      request,
      metadata || {},
      methodDescriptor_KYBERService_keygen);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AuthToken,
 *   !proto.KYBERKeys>}
 */
const methodDescriptor_KYBERService_getKeys = new grpc.web.MethodDescriptor(
  '/KYBERService/getKeys',
  grpc.web.MethodType.UNARY,
  proto.AuthToken,
  proto.KYBERKeys,
  /**
   * @param {!proto.AuthToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.KYBERKeys.deserializeBinary
);


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.KYBERKeys)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.KYBERKeys>|undefined}
 *     The XHR Node Readable Stream
 */
proto.KYBERServiceClient.prototype.getKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/KYBERService/getKeys',
      request,
      metadata || {},
      methodDescriptor_KYBERService_getKeys,
      callback);
};


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.KYBERKeys>}
 *     Promise that resolves to the response
 */
proto.KYBERServicePromiseClient.prototype.getKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/KYBERService/getKeys',
      request,
      metadata || {},
      methodDescriptor_KYBERService_getKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.KYBERKeyImport,
 *   !proto.KYBERKey>}
 */
const methodDescriptor_KYBERService_addKeys = new grpc.web.MethodDescriptor(
  '/KYBERService/addKeys',
  grpc.web.MethodType.UNARY,
  proto.KYBERKeyImport,
  proto.KYBERKey,
  /**
   * @param {!proto.KYBERKeyImport} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.KYBERKey.deserializeBinary
);


/**
 * @param {!proto.KYBERKeyImport} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.KYBERKey)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.KYBERKey>|undefined}
 *     The XHR Node Readable Stream
 */
proto.KYBERServiceClient.prototype.addKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/KYBERService/addKeys',
      request,
      metadata || {},
      methodDescriptor_KYBERService_addKeys,
      callback);
};


/**
 * @param {!proto.KYBERKeyImport} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.KYBERKey>}
 *     Promise that resolves to the response
 */
proto.KYBERServicePromiseClient.prototype.addKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/KYBERService/addKeys',
      request,
      metadata || {},
      methodDescriptor_KYBERService_addKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.KYBERExecution,
 *   !proto.Entries>}
 */
const methodDescriptor_KYBERService_runEncaps = new grpc.web.MethodDescriptor(
  '/KYBERService/runEncaps',
  grpc.web.MethodType.UNARY,
  proto.KYBERExecution,
  proto.Entries,
  /**
   * @param {!proto.KYBERExecution} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Entries.deserializeBinary
);


/**
 * @param {!proto.KYBERExecution} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Entries)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Entries>|undefined}
 *     The XHR Node Readable Stream
 */
proto.KYBERServiceClient.prototype.runEncaps =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/KYBERService/runEncaps',
      request,
      metadata || {},
      methodDescriptor_KYBERService_runEncaps,
      callback);
};


/**
 * @param {!proto.KYBERExecution} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Entries>}
 *     Promise that resolves to the response
 */
proto.KYBERServicePromiseClient.prototype.runEncaps =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/KYBERService/runEncaps',
      request,
      metadata || {},
      methodDescriptor_KYBERService_runEncaps);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.KYBERExecution,
 *   !proto.Entries>}
 */
const methodDescriptor_KYBERService_runDecaps = new grpc.web.MethodDescriptor(
  '/KYBERService/runDecaps',
  grpc.web.MethodType.UNARY,
  proto.KYBERExecution,
  proto.Entries,
  /**
   * @param {!proto.KYBERExecution} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Entries.deserializeBinary
);


/**
 * @param {!proto.KYBERExecution} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Entries)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Entries>|undefined}
 *     The XHR Node Readable Stream
 */
proto.KYBERServiceClient.prototype.runDecaps =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/KYBERService/runDecaps',
      request,
      metadata || {},
      methodDescriptor_KYBERService_runDecaps,
      callback);
};


/**
 * @param {!proto.KYBERExecution} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Entries>}
 *     Promise that resolves to the response
 */
proto.KYBERServicePromiseClient.prototype.runDecaps =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/KYBERService/runDecaps',
      request,
      metadata || {},
      methodDescriptor_KYBERService_runDecaps);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.CTRUServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.CTRUServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CTRUKeygenParameters,
 *   !proto.CTRUKeygenResult>}
 */
const methodDescriptor_CTRUService_keygen = new grpc.web.MethodDescriptor(
  '/CTRUService/keygen',
  grpc.web.MethodType.UNARY,
  proto.CTRUKeygenParameters,
  proto.CTRUKeygenResult,
  /**
   * @param {!proto.CTRUKeygenParameters} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.CTRUKeygenResult.deserializeBinary
);


/**
 * @param {!proto.CTRUKeygenParameters} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.CTRUKeygenResult)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.CTRUKeygenResult>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CTRUServiceClient.prototype.keygen =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/CTRUService/keygen',
      request,
      metadata || {},
      methodDescriptor_CTRUService_keygen,
      callback);
};


/**
 * @param {!proto.CTRUKeygenParameters} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.CTRUKeygenResult>}
 *     Promise that resolves to the response
 */
proto.CTRUServicePromiseClient.prototype.keygen =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/CTRUService/keygen',
      request,
      metadata || {},
      methodDescriptor_CTRUService_keygen);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AuthToken,
 *   !proto.CTRUKeys>}
 */
const methodDescriptor_CTRUService_getKeys = new grpc.web.MethodDescriptor(
  '/CTRUService/getKeys',
  grpc.web.MethodType.UNARY,
  proto.AuthToken,
  proto.CTRUKeys,
  /**
   * @param {!proto.AuthToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.CTRUKeys.deserializeBinary
);


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.CTRUKeys)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.CTRUKeys>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CTRUServiceClient.prototype.getKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/CTRUService/getKeys',
      request,
      metadata || {},
      methodDescriptor_CTRUService_getKeys,
      callback);
};


/**
 * @param {!proto.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.CTRUKeys>}
 *     Promise that resolves to the response
 */
proto.CTRUServicePromiseClient.prototype.getKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/CTRUService/getKeys',
      request,
      metadata || {},
      methodDescriptor_CTRUService_getKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CTRUKeyImport,
 *   !proto.CTRUKey>}
 */
const methodDescriptor_CTRUService_addKeys = new grpc.web.MethodDescriptor(
  '/CTRUService/addKeys',
  grpc.web.MethodType.UNARY,
  proto.CTRUKeyImport,
  proto.CTRUKey,
  /**
   * @param {!proto.CTRUKeyImport} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.CTRUKey.deserializeBinary
);


/**
 * @param {!proto.CTRUKeyImport} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.CTRUKey)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.CTRUKey>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CTRUServiceClient.prototype.addKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/CTRUService/addKeys',
      request,
      metadata || {},
      methodDescriptor_CTRUService_addKeys,
      callback);
};


/**
 * @param {!proto.CTRUKeyImport} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.CTRUKey>}
 *     Promise that resolves to the response
 */
proto.CTRUServicePromiseClient.prototype.addKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/CTRUService/addKeys',
      request,
      metadata || {},
      methodDescriptor_CTRUService_addKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CTRUExecution,
 *   !proto.Entries>}
 */
const methodDescriptor_CTRUService_runEncaps = new grpc.web.MethodDescriptor(
  '/CTRUService/runEncaps',
  grpc.web.MethodType.UNARY,
  proto.CTRUExecution,
  proto.Entries,
  /**
   * @param {!proto.CTRUExecution} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Entries.deserializeBinary
);


/**
 * @param {!proto.CTRUExecution} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Entries)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Entries>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CTRUServiceClient.prototype.runEncaps =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/CTRUService/runEncaps',
      request,
      metadata || {},
      methodDescriptor_CTRUService_runEncaps,
      callback);
};


/**
 * @param {!proto.CTRUExecution} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Entries>}
 *     Promise that resolves to the response
 */
proto.CTRUServicePromiseClient.prototype.runEncaps =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/CTRUService/runEncaps',
      request,
      metadata || {},
      methodDescriptor_CTRUService_runEncaps);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CTRUExecution,
 *   !proto.Entries>}
 */
const methodDescriptor_CTRUService_runDecaps = new grpc.web.MethodDescriptor(
  '/CTRUService/runDecaps',
  grpc.web.MethodType.UNARY,
  proto.CTRUExecution,
  proto.Entries,
  /**
   * @param {!proto.CTRUExecution} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Entries.deserializeBinary
);


/**
 * @param {!proto.CTRUExecution} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Entries)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Entries>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CTRUServiceClient.prototype.runDecaps =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/CTRUService/runDecaps',
      request,
      metadata || {},
      methodDescriptor_CTRUService_runDecaps,
      callback);
};


/**
 * @param {!proto.CTRUExecution} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Entries>}
 *     Promise that resolves to the response
 */
proto.CTRUServicePromiseClient.prototype.runDecaps =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/CTRUService/runDecaps',
      request,
      metadata || {},
      methodDescriptor_CTRUService_runDecaps);
};


module.exports = proto;

